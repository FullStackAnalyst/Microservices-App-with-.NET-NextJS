// <auto-generated />
using System;
using AuctionService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuctionService.Migrations
{
    [DbContext(typeof(AuctionDataContext))]
    [Migration("20250614171401_AddMassTransitOutbox")]
    partial class AddMassTransitOutbox
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AuctionService.Entities.Models.Auction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AuctionEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CurrentHighBid")
                        .HasColumnType("integer");

                    b.Property<int>("ReservePrice")
                        .HasColumnType("integer");

                    b.Property<string>("Seller")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SoldAmount")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Winner")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Auctions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("afbee524-5972-4075-8800-7d1f9d7b0a0c"),
                            AuctionEnd = new DateTime(2025, 6, 24, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7191),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7346),
                            ReservePrice = 20000,
                            Seller = "bob",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7420),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("c8c3ec17-01bf-49db-82aa-1ef80b833a9f"),
                            AuctionEnd = new DateTime(2025, 8, 13, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7493),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7494),
                            ReservePrice = 90000,
                            Seller = "alice",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7495),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("bbab4d5a-8565-48b1-9450-5ac2a5c4a654"),
                            AuctionEnd = new DateTime(2025, 6, 18, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7497),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7498),
                            ReservePrice = 0,
                            Seller = "bob",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7498),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("155225c1-4448-4066-9886-6786536e05ea"),
                            AuctionEnd = new DateTime(2025, 6, 4, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7517),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7517),
                            ReservePrice = 50000,
                            Seller = "tom",
                            Status = 2,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7518),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("466e4744-4dc5-4987-aae0-b621acfc5e39"),
                            AuctionEnd = new DateTime(2025, 7, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7519),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7520),
                            ReservePrice = 20000,
                            Seller = "alice",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7520),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("dc1e4071-d19d-459b-b848-b5c3cd3d151f"),
                            AuctionEnd = new DateTime(2025, 7, 29, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7521),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7522),
                            ReservePrice = 20000,
                            Seller = "bob",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7522),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("47111973-d176-4feb-848d-0ea22641c31a"),
                            AuctionEnd = new DateTime(2025, 6, 27, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7523),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7524),
                            ReservePrice = 150000,
                            Seller = "alice",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7524),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("6a5011a1-fe1f-47df-9a32-b5346b289391"),
                            AuctionEnd = new DateTime(2025, 7, 3, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7525),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7525),
                            ReservePrice = 0,
                            Seller = "bob",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7526),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("40490065-dac7-46b6-acc4-df507e0d6570"),
                            AuctionEnd = new DateTime(2025, 7, 4, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7527),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7527),
                            ReservePrice = 20000,
                            Seller = "tom",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7528),
                            Winner = ""
                        },
                        new
                        {
                            Id = new Guid("3659ac24-29dd-407a-81f5-ecfe6f924b9b"),
                            AuctionEnd = new DateTime(2025, 8, 1, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7529),
                            CreatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7529),
                            ReservePrice = 20000,
                            Seller = "bob",
                            Status = 0,
                            UpdatedAt = new DateTime(2025, 6, 14, 17, 14, 0, 963, DateTimeKind.Utc).AddTicks(7530),
                            Winner = ""
                        });
                });

            modelBuilder.Entity("AuctionService.Entities.Models.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuctionId")
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Make")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AuctionId")
                        .IsUnique();

                    b.ToTable("Items");

                    b.HasData(
                        new
                        {
                            Id = new Guid("16fec7db-0fc8-49d1-a3f3-f6d73ec67ae7"),
                            AuctionId = new Guid("afbee524-5972-4075-8800-7d1f9d7b0a0c"),
                            Color = "White",
                            ImageURL = "https://cdn.pixabay.com/photo/2016/05/06/16/32/car-1376190_960_720.jpg",
                            Make = "Ford",
                            Mileage = 50000,
                            Model = "GT",
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("0ebb71ab-f759-41a2-a3ad-66ac7b0bdd79"),
                            AuctionId = new Guid("c8c3ec17-01bf-49db-82aa-1ef80b833a9f"),
                            Color = "Black",
                            ImageURL = "https://cdn.pixabay.com/photo/2012/05/29/00/43/car-49278_960_720.jpg",
                            Make = "Bugatti",
                            Mileage = 15035,
                            Model = "Veyron",
                            Year = 2018
                        },
                        new
                        {
                            Id = new Guid("3da6b0f4-b721-46a2-88e6-dcfe0bfc15ff"),
                            AuctionId = new Guid("bbab4d5a-8565-48b1-9450-5ac2a5c4a654"),
                            Color = "Black",
                            ImageURL = "https://cdn.pixabay.com/photo/2012/11/02/13/02/car-63930_960_720.jpg",
                            Make = "Ford",
                            Mileage = 65125,
                            Model = "Mustang",
                            Year = 2023
                        },
                        new
                        {
                            Id = new Guid("a6210a0e-0067-4e20-b28e-a65ce86964c7"),
                            AuctionId = new Guid("155225c1-4448-4066-9886-6786536e05ea"),
                            Color = "Silver",
                            ImageURL = "https://cdn.pixabay.com/photo/2016/04/17/22/10/mercedes-benz-1335674_960_720.png",
                            Make = "Mercedes",
                            Mileage = 15001,
                            Model = "SLK",
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("9ca2efe6-9530-4028-8083-7c8d54c1aa7e"),
                            AuctionId = new Guid("466e4744-4dc5-4987-aae0-b621acfc5e39"),
                            Color = "White",
                            ImageURL = "https://cdn.pixabay.com/photo/2017/08/31/05/47/bmw-2699538_960_720.jpg",
                            Make = "BMW",
                            Mileage = 90000,
                            Model = "X1",
                            Year = 2017
                        },
                        new
                        {
                            Id = new Guid("a7208ca4-9f3b-4dde-b8cb-729b214c76b9"),
                            AuctionId = new Guid("dc1e4071-d19d-459b-b848-b5c3cd3d151f"),
                            Color = "Red",
                            ImageURL = "https://cdn.pixabay.com/photo/2017/11/09/01/49/ferrari-458-spider-2932191_960_720.jpg",
                            Make = "Ferrari",
                            Mileage = 50000,
                            Model = "Spider",
                            Year = 2015
                        },
                        new
                        {
                            Id = new Guid("252ae859-3491-4451-b024-7e81a266dfb3"),
                            AuctionId = new Guid("47111973-d176-4feb-848d-0ea22641c31a"),
                            Color = "Red",
                            ImageURL = "https://cdn.pixabay.com/photo/2017/11/08/14/39/ferrari-f430-2930661_960_720.jpg",
                            Make = "Ferrari",
                            Mileage = 5000,
                            Model = "F-430",
                            Year = 2022
                        },
                        new
                        {
                            Id = new Guid("1d0f3268-7963-43c3-b9bb-a655f33c2a84"),
                            AuctionId = new Guid("6a5011a1-fe1f-47df-9a32-b5346b289391"),
                            Color = "White",
                            ImageURL = "https://cdn.pixabay.com/photo/2019/12/26/20/50/audi-r8-4721217_960_720.jpg",
                            Make = "Audi",
                            Mileage = 10050,
                            Model = "R8",
                            Year = 2021
                        },
                        new
                        {
                            Id = new Guid("c2b0cdd2-ac73-4afa-9d61-179b429b8e21"),
                            AuctionId = new Guid("40490065-dac7-46b6-acc4-df507e0d6570"),
                            Color = "Black",
                            ImageURL = "https://cdn.pixabay.com/photo/2016/09/01/15/06/audi-1636320_960_720.jpg",
                            Make = "Audi",
                            Mileage = 25400,
                            Model = "TT",
                            Year = 2020
                        },
                        new
                        {
                            Id = new Guid("6985c1dc-c0b9-4a04-8537-fce0c9a5e066"),
                            AuctionId = new Guid("3659ac24-29dd-407a-81f5-ecfe6f924b9b"),
                            Color = "Rust",
                            ImageURL = "https://cdn.pixabay.com/photo/2017/08/02/19/47/vintage-2573090_960_720.jpg",
                            Make = "Ford",
                            Mileage = 150150,
                            Model = "Model T",
                            Year = 1938
                        });
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.InboxState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("Consumed")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<int>("ReceiveCount")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Received")
                        .HasColumnType("timestamp with time zone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("Id");

                    b.HasIndex("Delivered");

                    b.ToTable("InboxState");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.Property<long>("SequenceNumber")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("SequenceNumber"));

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<Guid?>("ConversationId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CorrelationId")
                        .HasColumnType("uuid");

                    b.Property<string>("DestinationAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime?>("EnqueueTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ExpirationTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FaultAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("Headers")
                        .HasColumnType("text");

                    b.Property<Guid?>("InboxConsumerId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InboxMessageId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InitiatorId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("MessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("OutboxId")
                        .HasColumnType("uuid");

                    b.Property<string>("Properties")
                        .HasColumnType("text");

                    b.Property<Guid?>("RequestId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<DateTime>("SentTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SourceAddress")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("SequenceNumber");

                    b.HasIndex("EnqueueTime");

                    b.HasIndex("ExpirationTime");

                    b.HasIndex("OutboxId", "SequenceNumber")
                        .IsUnique();

                    b.HasIndex("InboxMessageId", "InboxConsumerId", "SequenceNumber")
                        .IsUnique();

                    b.ToTable("OutboxMessage");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxState", b =>
                {
                    b.Property<Guid>("OutboxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("Delivered")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("LastSequenceNumber")
                        .HasColumnType("bigint");

                    b.Property<Guid>("LockId")
                        .HasColumnType("uuid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bytea");

                    b.HasKey("OutboxId");

                    b.HasIndex("Created");

                    b.ToTable("OutboxState");
                });

            modelBuilder.Entity("AuctionService.Entities.Models.Item", b =>
                {
                    b.HasOne("AuctionService.Entities.Models.Auction", "Auction")
                        .WithOne("Item")
                        .HasForeignKey("AuctionService.Entities.Models.Item", "AuctionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Auction");
                });

            modelBuilder.Entity("MassTransit.EntityFrameworkCoreIntegration.OutboxMessage", b =>
                {
                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.OutboxState", null)
                        .WithMany()
                        .HasForeignKey("OutboxId");

                    b.HasOne("MassTransit.EntityFrameworkCoreIntegration.InboxState", null)
                        .WithMany()
                        .HasForeignKey("InboxMessageId", "InboxConsumerId")
                        .HasPrincipalKey("MessageId", "ConsumerId");
                });

            modelBuilder.Entity("AuctionService.Entities.Models.Auction", b =>
                {
                    b.Navigation("Item")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
